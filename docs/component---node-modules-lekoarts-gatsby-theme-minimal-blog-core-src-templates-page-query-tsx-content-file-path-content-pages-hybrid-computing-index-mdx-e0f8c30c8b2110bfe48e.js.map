{"version":3,"file":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-page-query-tsx-content-file-path-content-pages-hybrid-computing-index-mdx-e0f8c30c8b2110bfe48e.js","mappings":"iMAIe,SAASA,EAAmBC,GAAwC,OAAlCC,GAA+BD,EAC9E,OAAOE,EAAAA,cAACC,EAAAA,EAASF,EACnB,C,wHCHA,SAASG,EAAkBH,GACzB,MAAMI,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,EAAG,IACHC,IAAK,QACJC,EAAAA,EAAAA,MAAsBd,EAAMe,YAC/B,OAAOd,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBG,EAAYG,GAAI,KAAM,MAAO,KAAMN,EAAAA,cAAoBG,EAAYI,GAAI,KAAM,KAAMP,EAAAA,cAAoBG,EAAYK,GAAI,KAAM,UAAW,KAAMR,EAAAA,cAAoBG,EAAYK,GAAI,KAAM,UAAW,KAAMR,EAAAA,cAAoBG,EAAYK,GAAI,KAAM,UAAW,KAAMR,EAAAA,cAAoBG,EAAYK,GAAI,KAAM,aAAc,KAAMR,EAAAA,cAAoBG,EAAYK,GAAI,KAAM,WAAY,MAAO,KAAMR,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,wCAAyCT,EAAAA,cAAoBG,EAAYO,IAAK,KAAM,gGAAiGV,EAAAA,cAAoBG,EAAYO,IAAK,KAAM,gGAAiGV,EAAAA,cAAoBG,EAAYO,IAAK,KAAM,2EAA4EV,EAAAA,cAAoBG,EAAYO,IAAK,KAAM,uCAAwC,KAAMV,EAAAA,cAAoBG,EAAYG,GAAI,KAAM,QAAS,KAAMN,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,uBAAwBT,EAAAA,cAAoBG,EAAYQ,EAAG,CAC/pCI,KAAM,gGACL,oBAAqBf,EAAAA,cAAoBG,EAAYO,IAAK,KAAM,WAAYV,EAAAA,cAAoBG,EAAYQ,EAAG,CAChHI,KAAM,gGACL,qBAAsB,KAAMf,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,sCAAuC,KAAMT,EAAAA,cAAoBG,EAAYG,GAAI,KAAM,SAAU,KAAMN,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,6GAA8G,KAAMT,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,qHAAsH,KAAMT,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,+DAAgE,KAAMT,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,qFAAsF,KAAMT,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,8DAA+D,KAAMT,EAAAA,cAAoBG,EAAYM,EAAG,KAAMT,EAAAA,cAAoBG,EAAYQ,EAAG,CAC75BI,KAAM,kDACL,2BAA4B,KAAMf,EAAAA,cAAoBG,EAAYS,IAAK,CACxEI,IAAK,kFACLC,IAAK,YACH,KAAMjB,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,yDAA0D,KAAMT,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,gCAAiCT,EAAAA,cAAoBG,EAAYO,IAAK,KAAM,sCAAuC,KAAMV,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,mGAAoG,KAAMT,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,wGAAyG,KAAMT,EAAAA,cAAoBG,EAAYM,EAAG,KAAM,wDAC3mB,CAKA,MAJA,SAAoBV,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOmB,QAASC,GAAaf,OAAOC,OAAO,CAAC,GAAGQ,EAAAA,EAAAA,MAAsBd,EAAMe,YAC3E,OAAOK,EAAYnB,EAAAA,cAAoBmB,EAAWpB,EAAOC,EAAAA,cAAoBE,EAAmBH,IAAUG,EAAkBH,EAC9H,E,UCvBe,SAASqB,EAAiBrB,GACvC,OAAOC,EAAAA,cAAoBqB,EAAAA,EAAetB,EAAOC,EAAAA,cAAoBsB,EAAqBvB,GAC5F,CAHAsB,EAAAA,C","sources":["webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog/src/@lekoarts/gatsby-theme-minimal-blog-core/components/page.tsx","webpack://minimal-blog/./content/pages/HybridComputing/index.mdx","webpack://minimal-blog/./node_modules/@lekoarts/gatsby-theme-minimal-blog-core/src/templates/page-query.tsx"],"sourcesContent":["import type { PageProps } from \"gatsby\"\nimport * as React from \"react\"\nimport Page, { Head, MBPageProps } from \"../../../components/page\"\n\nexport default function MinimalBlogCorePage({ ...props }: PageProps<MBPageProps>) {\n  return <Page {...props} />\n}\n\nexport { Head }\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    p: \"p\",\n    br: \"br\",\n    a: \"a\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"特徴\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"組み込み対応\"), \"\\n\", React.createElement(_components.li, null, \"通信帯域削減\"), \"\\n\", React.createElement(_components.li, null, \"消費電力削減\"), \"\\n\", React.createElement(_components.li, null, \"既存システム親和性\"), \"\\n\", React.createElement(_components.li, null, \"レスポンス改善\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"OpenCLを拡張するため、様々なCPU、GPU、FPGAに適用されます。\", React.createElement(_components.br), \"\\n\", \"データ送信を行わず、該当するルーチンのみを転送するため大容量データ\\nに関しては通信帯域削減になります。弊社の実験では1Gぐらいのデータより\\n粒度が大きくなるとHCが優位になりました。\", React.createElement(_components.br), \"\\n\", \"昨今は通信帯域が拡大して通信にかかる消費電力が急増しています。\\nすでにデータセンターの4割近い電量消費がネットワーク通信による\\nものだそうです。通信帯域削減は消費電力削減になります。\", React.createElement(_components.br), \"\\n\", \"既存システムに導入するためには、対応したストレージの導入と\\nアプリケーションの改修を行えばアーキテクチャやフレームワークの\\n変更は不要です。\", React.createElement(_components.br), \"\\n\", \"データ処理の一部を集めずに分散処理をするためレスポンスが改善されます。\"), \"\\n\", React.createElement(_components.h2, null, \"関連特許\"), \"\\n\", React.createElement(_components.p, null, \"Memory Hierarchy関連: \", React.createElement(_components.a, {\n    href: \"https://patentscope2.wipo.int/search/ja/detail.jsf?docId=US325711151&_cid=JP2-LNBLS1-57397-1\"\n  }, \"WIPO-20210165608\"), React.createElement(_components.br), \"\\n\", \"分散処理関連: \", React.createElement(_components.a, {\n    href: \"https://patentscope2.wipo.int/search/ja/detail.jsf?docId=US339383497&_cid=JP2-LNBLS1-57397-1\"\n  }, \"WIPO-20210326123\")), \"\\n\", React.createElement(_components.p, null, \"技術顧問: 東京大学教授 橋田浩一先生 (論文・特許査読、技術評価)\"), \"\\n\", React.createElement(_components.h2, null, \"開発の背景\"), \"\\n\", React.createElement(_components.p, null, \"1990年から現代までのストレージ容量拡大速度と転送速度の改善を比較すると、\\n常にストレージ容量拡大の速度が上回っていました。また、半導体の集積度の\\n改善と転送速度の改善においても半導体が上回っていました。\"), \"\\n\", React.createElement(_components.p, null, \"転送速度はシャノンの法則に縛られ、Hz = クロックごとに実現可能な帯域の\\n上限が決まってきます。クロックを上げると到達距離は短くなる特性があり、\\nインターネットの長距離通信においては伝送路のクロック上昇に限界があります。\"), \"\\n\", React.createElement(_components.p, null, \"一方、ストレージ内部や半導体においては露光線幅を縮めることで伝達距離\\nを短くしてクロックを上げて来た歴史があります。\"), \"\\n\", React.createElement(_components.p, null, \"伝達問題は深刻で、すでにインターネットどころかパソコンの内部やスマホの\\nSoCのチップ間においてさえ伝達距離が遠すぎてクロックを上げられなくなって\\nおります。\"), \"\\n\", React.createElement(_components.p, null, \"この問題はMemory Hierarchyと言われ、スパコンの学会では解決すべき主要な\\n課題として扱われています。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Memory_hierarchy\"\n  }, \"Memory Hierarchy(wiki)\")), \"\\n\", React.createElement(_components.img, {\n    src: \"https://upload.wikimedia.org/wikipedia/commons/0/0c/ComputerMemoryHierarchy.svg\",\n    alt: \"diagram\"\n  }), \"\\n\", React.createElement(_components.p, null, \"上記の絵を見ていると、DRAMとFlush Memoryの間に設計上の大きな違いがある\\n事がわかります。\"), \"\\n\", React.createElement(_components.p, null, \"アドレス空間でアクセス: レジスター、キャッシュ、DRAM\", React.createElement(_components.br), \"\\n\", \"コマンドでアクセス: USB Memory、SSD、HDD、Tape\"), \"\\n\", React.createElement(_components.p, null, \"USB MemoryやSSDから下はアドレスが割り当てられておらず、何らかのコマンドを\\nCPUから発行して、それがストレージを制御するコントローラーで解釈して\\nデータを読みだしています。\"), \"\\n\", React.createElement(_components.p, null, \"そのため、コマンドでアクセスするストレージにもアドレスを割り振るのが\\nIntel社のMemory Centric Architectureで、Optane、oneAPIなどで\\n実用化されています。\"), \"\\n\", React.createElement(_components.p, null, \"それに対して、まったく別のアプローチを取るのが弊社が開発する\\nHybrid Computing™です。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import React from \"react\";\nimport GATSBY_COMPILED_MDX from \"/home/mkoikawa/wwwroot/gatsby/minimal/content/pages/HybridComputing/index.mdx\";\nimport PageComponent, {Head} from \"../components/page\";\nPageComponent\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PageComponent, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport {Head};\nconst query = \"3297325238\";\n"],"names":["MinimalBlogCorePage","_ref","props","React","Page","_createMdxContent","_components","Object","assign","h2","ul","li","p","br","a","img","_provideComponents","components","href","src","alt","wrapper","MDXLayout","GatsbyMDXWrapper","PageComponent","GATSBY_COMPILED_MDX"],"sourceRoot":""}